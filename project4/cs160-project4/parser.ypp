%{
    #include <cstdio>
    #include <cstdlib>

    #include "ast.hpp"
    #include "primitive.hpp"
    #include "symtab.hpp"
    #include <iostream>
    using namespace std;

    #define YYDEBUG 1

    extern Program_ptr ast;
    int yylex(void);
    void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose

 %token  BOOLEAN CHAR INTEGER STRING INTPTR CHARPTR IF ELSE WHILE VAR PROCEDURE RETURN ID NULLX
 %token NUMBER   STRINGV CHARV TRUE FALSE
 %right '='
 %left OR
 %left AND
 %left EQ NEQ
 %left '<' '>'  LE GE
 %left '+' '-'
 %left '*' '/'
 %right Dummy

%%

s       : procedures
        {
            ast = new ProgramImpl($1.u_proc_list);
        }
        ;


procedures  : procedures procedure
            {
                $1.u_proc_list->push_back($2.u_proc);
                $$.u_proc_list = $1.u_proc_list;
            }
            |
            {
                $$.u_proc_list = new std::list<Proc_ptr>();
            }
            ;

procedure   : PROCEDURE ID '(' parameter ')' RETURN returnType '{' procedureBlock '}'
            {
                $$.u_proc = new ProcImpl(new SymName($2.u_base_charptr),$4.u_decl_list,$7.u_type,$9.u_procedure_block);
            }
            ;



procedureBlock  : decls procedures stmts returnStmt
                {
                    $$.u_procedure_block = new Procedure_blockImpl($1.u_decl_list, $2.u_proc_list, $3.u_stat_list, $4.u_return_stat);
                }
                ;

decls   : decls decl
        {
            $1.u_decl_list->push_back($2.u_decl);
            $$.u_decl_list = $1.u_decl_list;
        }
        |
        {
            $$.u_decl_list = new std::list<Decl_ptr>();
        }
        ;


decl    : VAR ID idPrime ':' declareType ';'
        {
            $3.u_symname_list->push_front(new SymName($2.u_base_charptr));
            $$.u_decl = new DeclImpl($3.u_symname_list,$5.u_type);
        }
        ;

stmts   : stmts stmt
        {
            $1.u_stat_list->push_back($2.u_stat);
            $$.u_stat_list = $1.u_stat_list;
        }
        |
        {
            $$.u_stat_list = new std::list<Stat_ptr>();
        }


stmt    : lhs '=' exprs ';'
        {
            $$.u_stat = new Assignment($1.u_lhs,$3.u_expr);
        }
        | lhs '=' STRINGV ';'
        {
            $$.u_stat = new StringAssignment($1.u_lhs,new StringPrimitive($3.u_base_charptr));
        }
        | lhs '=' ID '(' arguments ')' ';'
        {
            $$.u_stat = new Call($1.u_lhs,new SymName($3.u_base_charptr),$5.u_expr_list);
        }
        | IF '(' exprs ')'  '{' stmts '}' ELSE '{' stmts '}'
        {
            $$.u_stat = new IfWithElse($3.u_expr, new Nested_blockImpl($6.u_stat_list), new Nested_blockImpl($10.u_stat_list));
        }
        | IF '(' exprs ')'  '{' stmts '}'
        {
            $$.u_stat = new IfNoElse($3.u_expr, new Nested_blockImpl($6.u_stat_list));
        }
        | WHILE '(' exprs ')' '{' stmts '}'
        {
            $$.u_stat = new WhileLoop($3.u_expr, new Nested_blockImpl($6.u_stat_list));
        }
        ;

returnStmt  : RETURN exprs ';'
            {
                $$.u_return_stat = new Return($2.u_expr);
            }
            ;


exprs   : exprs '*' exprs
        {
            $$.u_expr = new Times($1.u_expr,$3.u_expr);
        }
        | exprs '/' exprs
        {
            $$.u_expr = new Div($1.u_expr,$3.u_expr);
        }
        | exprs '+' exprs
        {
            $$.u_expr = new Plus($1.u_expr,$3.u_expr);
        }
        | exprs '-' exprs
        {
            $$.u_expr = new Minus($1.u_expr,$3.u_expr);
        }
        | exprs EQ  exprs
        {
            $$.u_expr = new Compare($1.u_expr,$3.u_expr);
        }
        | exprs GE  exprs
        {
            $$.u_expr = new Gteq($1.u_expr,$3.u_expr);
        }
        | exprs LE  exprs
        {
            $$.u_expr = new Lteq($1.u_expr,$3.u_expr);
        }
        | exprs NEQ exprs
        {
            $$.u_expr = new Noteq($1.u_expr,$3.u_expr);
        }
        | exprs '>' exprs
        {
            $$.u_expr = new Gt($1.u_expr,$3.u_expr);
        }
        | exprs '<' exprs
        {
            $$.u_expr = new Lt($1.u_expr,$3.u_expr);
        }
        | exprs AND exprs
        {
            $$.u_expr = new And($1.u_expr,$3.u_expr);
        }
        | exprs OR  exprs
        {
            $$.u_expr = new Or($1.u_expr,$3.u_expr);
        }
        | term
        {
            $$.u_expr = $1.u_expr;
        }
        ;


term    : ID sbarket
        {
            $$.u_expr = new ArrayAccess(new SymName($1.u_base_charptr),$2.u_expr);
        }
        | ID
        {
            $$.u_expr = new Ident(new SymName($1.u_base_charptr));
        }
        | literal
        {
            $$.u_expr = $1.u_expr;
        }
        | '(' exprs ')'
        {
            $$.u_expr = $2.u_expr;
        }
        | '|' exprs '|'
        {
            $$.u_expr = new AbsoluteValue($2.u_expr);
        }
        | '!' exprs                     %prec Dummy
        {
            $$.u_expr = new Not($2.u_expr);
        }
        | '^' exprs                     %prec Dummy
        {
            $$.u_expr = new Deref($2.u_expr);
        }
        | '-' exprs                     %prec Dummy
        {
            $$.u_expr = new Uminus($2.u_expr);
        }
        | '+' exprs                     %prec Dummy
        {
            $$ = $2;
        }
        | '&' lhs                     %prec Dummy
        {
            $$.u_expr = new AddressOf($2.u_lhs);
        }
        ;

lhs     : ID sbarket
        {
            $$.u_lhs = new ArrayElement(new SymName($1.u_base_charptr),$2.u_expr);
        }
        | ID
        {
            $$.u_lhs = new Variable(new SymName($1.u_base_charptr));
        }
        | '^' ID
        {
            $$.u_lhs = new DerefVariable(new SymName($2.u_base_charptr));
        }
        ;

literal : NUMBER
        {
            $$.u_expr = new IntLit(new Primitive($1.u_base_int));
        }
        | CHARV
        {
            $$.u_expr = new CharLit(new Primitive($1.u_base_int));
        }
        | TRUE
        {
            $$.u_expr = new BoolLit(new Primitive(1));
        }
        | FALSE
        {
            $$.u_expr = new BoolLit(new Primitive(0));
        }
        | NULLX
        {
            $$.u_expr = new NullLit();
        }
        ;

sbarket : '[' exprs ']'
        {
            $$.u_expr = $2.u_expr;
        }
        ;




returnType  : BOOLEAN           {$$.u_type = new TBoolean();}
        | INTEGER               {$$.u_type = new TInteger();}
        | CHAR                  {$$.u_type = new TCharacter();}
        | CHARPTR               {$$.u_type = new TCharPtr();}
        | INTPTR                {$$.u_type = new TIntPtr();}
        ;

declareType : BOOLEAN               {$$.u_type = new TBoolean();}
        | INTEGER                   {$$.u_type = new TInteger();}
        | CHAR                      {$$.u_type = new TCharacter();}
        | CHARPTR                   {$$.u_type = new TCharPtr();}
        | INTPTR                    {$$.u_type = new TIntPtr();}
        | STRING '[' NUMBER ']'     {$$.u_type = new TString(new Primitive($3.u_base_int));}
        ;



arguments : exprs argumentsPrime
        {
            $2.u_expr_list->push_front($1.u_expr);
            $$.u_expr_list = $2.u_expr_list;
        }
        |
        {
            $$.u_expr_list = new std::list<Expr_ptr>();
        }
        ;

argumentsPrime: ',' exprs argumentsPrime
        {
            $3.u_expr_list->push_front($2.u_expr);
            $$.u_expr_list = $3.u_expr_list;
        }
        |
        {
            $$.u_expr_list = new std::list<Expr_ptr>();
        }
        ;


parameter: ID idPrime ':' returnType parameterPrime
        {
            $2.u_symname_list->push_front(new SymName($1.u_base_charptr));
            $5.u_decl_list->push_front(new DeclImpl($2.u_symname_list,$4.u_type));
            $$.u_decl_list = $5.u_decl_list;
        }
        |
        {
            $$.u_decl_list = new std::list<Decl_ptr>();
        }
        ;

parameterPrime : ';' ID idPrime ':' returnType parameterPrime
        {
            $3.u_symname_list->push_front(new SymName($2.u_base_charptr));
            $6.u_decl_list->push_front(new DeclImpl($3.u_symname_list,$5.u_type));
            $$.u_decl_list = $6.u_decl_list;
        }
        |
        {
            $$.u_decl_list = new std::list<Decl_ptr>();
        }
        ;

idPrime : ',' ID idPrime
        {
            $3.u_symname_list->push_front(new SymName($2.u_base_charptr));
            $$.u_symname_list = $3.u_symname_list;
        }
        |
        {
            $$.u_symname_list = new std::list<SymName_ptr>();
        }
        ;




%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    return;
}
