%{
    #include <stdio.h>
    #include <stdlib.h>
    #define YYDEBUG 1

    int yylex(void);
    void yyerror(const char *);
%}
 
/* Enables verbose error messages */
%error-verbose

/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */

 %token MAIN BOOLEAN CHAR INTEGER STRING INTPTR CHARPTR IF ELSE WHILE VAR PROCEDURE RETURN ID NULLX
 %token NUMBER  AND OR STRINGV CHARV TRUE FALSE 
 %left '<' '>' '=' NEQ LE GE EQ 
 %left '+' '-'
 %left '*' '/'
 %right Dummy 
%%

/** WRITE ME:
 *  This is the language from Project 1. You need to put the productions for
 *  the grammar for the language for this project here.
 */
		
s       : procedures 
        ;


procedures: procedures procedure
          | 

procedure : PROCEDURE ID '(' parameter ')' RETURN returnType '{' stmts  '}' 
        ;

        ;

stmts   : stmts stmt
        | 


stmt    : lhs '=' exprs ';'        
        | lhs '=' ID '(' arguments ')' ';' 
        | IF '(' boolExpr ')'  '{' stmts '}' ELSE '{' stmts '}' 
        | IF '(' boolExpr ')'  '{' stmts '}'
        | WHILE '(' boolExpr ')' '{' stmts '}' 
        | PROCEDURE ID '(' parameter ')' RETURN type '{' stmts  '}' 
        | VAR ID idPrime ':' declareType ';'
        | RETURN exprs
        ;


exprs   : NULLX
        | ID sbarket                    
        | '&' ID                        
        | '&' ID sbarket                
        | STRINGV                       
        | CHARV                         
        | numExprs                      
        | boolExpr                      
        ;

lhs     : ID sbarket
        | ID
        | '^' ID
        ;

sbarket : '[' numExprs ']'
        ;


cop     : EQ | GE | LE | NEQ | '>' | '<'
        ;

aop     : '+' | '-' | '*' |'/'

type    : BOOLEAN
        | INTEGER
        | CHAR
        | CHARPTR
        | STRING
        | INTPTR
        ;

returnType  : BOOLEAN
        | INTEGER
        | CHAR
        | CHARPTR
        | INTPTR
        ;

declareType : BOOLEAN
        | INTEGER
        | CHAR
        | CHARPTR
        | INTPTR
        | STRING '[' NUMBER ']'
        ;

numExprs: factor termPrime
        ;

term    : ID
        | NUMBER
        | '^' ID
        | '^' '('ID '+' numExprs ')'    
        | '^' '('ID '-' numExprs ')'    
        | '^' '(' ID ')'                
        | '-' term                      %prec Dummy
        ;

termPrime:  aop factor termPrime            {printf("AOP Factor TermPrime\n");}
        |
        ;

factor  : term                              {printf("Term\n");}
        | '(' numExprs ')'
        | '|' numExprs '|'


        

arguments : exprs argumentsPrime
        |
        ;

argumentsPrime: ',' exprs argumentsPrime
        |
        ;

boolExpr: term cop term conditions
        | TRUE conditions
        | FALSE conditions
        | '!' boolExpr
        ; 

conditions: AND boolExpr
        | OR boolExpr
        |
        ;


parameter: ID idPrime ':' type parameterPrime
        |
        ;

parameterPrime : ';' ID idPrime ':' type parameterPrime
        |
        ;

idPrime : ',' ID idPrime 
        |   
        ;



%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    return;
}
