%{
    #include <stdio.h>
    #include <stdlib.h>
    #define YYDEBUG 1

    int yylex(void);
    void yyerror(const char *);
%}
 
/* Enables verbose error messages */
%error-verbose

/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */

 %token MAIN BOOLEAN CHAR INTEGER STRING INTPTR CHARPTR IF ELSE WHILE VAR PROCEDURE RETURN ID NULLX
 %token NUMBER EQ GE LE NEQ AND OR PVALUE ADDRESS STRINGV CHARV TRUE FALSE
%%

/** WRITE ME:
 *  This is the language from Project 1. You need to put the productions for
 *  the grammar for the language for this project here.
 */
		
S       : PROCEDURE ProcedureStarts MainProcedures Procedures
        | Exprs                                      
        ;

ProcedureStarts: ID '(' Parameter ')' RETURN Type '{' Exprs ReturnExprs '}' PROCEDURE ProcedureStarts
        | 
        ;

Procedures : PROCEDURE ID '(' Parameter ')' RETURN Type '{' Exprs ReturnExprs '}' 
        |
        ;

MainProcedures: MAIN '('  ')'RETURN Type '{' Exprs ReturnExprs '}'
        ;

Exprs   : VAR ID IDPrime ':' DeclareType ';' Exprs
        | LHS '=' RHS ';' Exprs
        | Ifelse Exprs
        | WhileStmt Exprs
        |
        ;

WhileStmt: WHILE '(' BoolStmt ')' '{' Exprs '}'
        ;

        ;

COP     : EQ | GE | LE | NEQ | '>' | '<'
        ;

Sbarket : '[' Calc ']'
        |
        ;

LHS     : ID Sbarket 
        | '&' ID Sbarket
        | '^' ID
        ;

Arguments : ID IDPrime
        |
        ;

RHS     : Calc
        | ID '(' Arguments ')'
        | NULLX
        | ID  Sbarket
        | '&' ID Sbarket
        | '^' ID
        | STRINGV
        | CHARV
        ;


Term    : ID
        | NUMBER

ReturnExprs : RETURN NUMBER
            | RETURN ID Sbarket
        ;

Parameter: ID IDPrime ':' Type ParameterPrime
        |
        ;

ParameterPrime : ';' ID IDPrime ':' Type ParameterPrime
        |
        ;

IDPrime : ',' ID IDPrime
        |   
        ;

Type    : BOOLEAN
        | INTEGER
        | CHAR
        | CHARPTR
        | STRING
        ;

DeclareType : BOOLEAN
        | INTEGER
        | CHAR
        | CHARPTR
        | STRING '[' NUMBER ']'
        ;

Ifelse  : IF '(' BoolStmt ')'  '{' Exprs '}' ElseStmt
        ;

BoolStmt: Term COP Term Conditions
        | TRUE
        | FALSE
        ; 

ElseStmt: ELSE '{' Exprs '}'
        |
        ;

Conditions: AND BoolStmt
        | OR BoolStmt
        |
        ;

Calc    : Tm CalcPrime
        ;

CalcPrime : '+' Tm CalcPrime
        |   '-' Tm CalcPrime
        |
        ;

Tm      : Factor TmPrime
        ;

TmPrime : '*' Factor TmPrime
        | '/' Factor TmPrime
        |
        ;

Factor  : NUMBER
        |'(' Calc ')'
        |'|' Calc '|'
        ;


%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    return;
}
