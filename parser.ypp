%{
    #include <stdio.h>
    #include <stdlib.h>
    #define YYDEBUG 1

    int yylex(void);
    void yyerror(const char *);
%}
 
/* Enables verbose error messages */
%error-verbose

/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */

 %token MAIN BOOLEAN CHAR INTEGER STRING INTPTR CHARPTR IF ELSE WHILE VAR PROCEDURE RETURN ID NULLX
 %token NUMBER  AND OR PVALUE ADDRESS STRINGV CHARV TRUE FALSE
 %left '<' '>' '=' NEQ LE GE EQ 
 %left '+' '-'
 %left '*' '/'
%%

/** WRITE ME:
 *  This is the language from Project 1. You need to put the productions for
 *  the grammar for the language for this project here.
 */
		
S       : PROCEDURE ProcedureStarts MainProcedures Procedures
        | Exprs                                      
        ;

ProcedureStarts: ID '(' Parameter ')' RETURN Type '{' Stmts ReturnStmt '}' PROCEDURE ProcedureStarts
        | 
        ;

Procedures : PROCEDURE ID '(' Parameter ')' RETURN Type '{' Stmts ReturnStmt '}' Procedures
        |
        ;

MainProcedures: MAIN '('  ')'RETURN Type '{' Stmts ReturnStmt '}'
        ;

Stmts   : LHS '=' Exprs ';' Stmts
        | IfelseStmt Stmts
        | WhileStmt Stmts
        | PROCEDURE ID '(' Parameter ')' RETURN Type '{' Stmts ReturnStmt '}' Stmts
        | VAR ID IDPrime ':' DeclareType ';' Stmts
        |
        ;


Exprs   : NULLX
        | ID Sbarket
        | '&' ID 
        | '&' ID Sbarket
        | '^' ID
        | '^' '('ID '+' NUMBER ')'
        | '^' '('ID '-' NUMBER ')'
        | '^' '(' ID ')'
        | STRINGV
        | CHARV
        | NumExprs
        | ID '(' Arguments ')'
        | BoolStmt
        ;

LHS     : ID Sbarket
        | ID
        | '&' ID Sbarket
        | '&' ID
        | '^' ID
        ;

Sbarket : '[' NumExprs ']'
        ;
COP     : EQ | GE | LE | NEQ | '>' | '<'
        ;

AOP     : '+' | '-' | '*' |'/'

Type    : BOOLEAN
        | INTEGER
        | CHAR
        | CHARPTR
        | STRING
        |INTPTR
        ;

DeclareType : BOOLEAN
        | INTEGER
        | CHAR
        | CHARPTR
        | STRING '[' NUMBER ']'
        ;

NumExprs: Factor TermPrime
        ;

Term    : ID
        | NUMBER

TermPrime:  AOP Factor TermPrime
        |
        ;

Factor  : Term
        | '(' NumExprs ')'
        | '|' NumExprs '|'

Arguments : Exprs ArgumentsPrime
        |
        ;

ArgumentsPrime: ',' Exprs ArgumentsPrime
        |
        ;

BoolStmt: Term COP Term Conditions
        | TRUE Conditions
        | FALSE Conditions
        ; 

Conditions: AND BoolStmt
        | OR BoolStmt
        |
        ;

ReturnStmt : RETURN Exprs
        ;

Parameter: ID IDPrime ':' Type ParameterPrime
        |
        ;

ParameterPrime : ';' ID IDPrime ':' Type ParameterPrime
        |
        ;

IDPrime : ',' ID IDPrime
        |   
        ;

IfelseStmt  : IF '(' BoolStmt ')'  '{' Stmts '}' ElseStmt
        ;

ElseStmt: ELSE '{' Stmts '}'
        |
        ;

WhileStmt: WHILE '(' BoolStmt ')' '{' Stmts '}'
        ;


%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    return;
}
