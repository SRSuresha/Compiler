%{
    #include <stdio.h>
    #include <stdlib.h>
    #define YYDEBUG 1

    int yylex(void);
    void yyerror(const char *);
%}
 
/* Enables verbose error messages */
%error-verbose

/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */

 %token  BOOLEAN CHAR INTEGER STRING INTPTR CHARPTR IF ELSE WHILE VAR PROCEDURE RETURN ID NULLX
 %token NUMBER   STRINGV CHARV TRUE FALSE 
 %left AND OR
 %left '<' '>' '=' NEQ LE GE EQ 
 %left '+' '-'
 %left '*' '/'
 %right Dummy 
%%

/** WRITE ME:
 *  This is the language from Project 1. You need to put the productions for
 *  the grammar for the language for this project here.
 */
		
s       : procedures                
        ;


procedures: procedures procedure
          | 

procedure : PROCEDURE ID '(' parameter ')' RETURN returnType '{' stmts '}' 
        ;

        ;

stmts   : stmts stmt
        | 


stmt    : lhs '=' exprs ';'      
        | lhs '=' STRINGV ';'  
        | lhs '=' ID '(' arguments ')' ';' 
        | IF '(' exprs ')'  '{' stmts '}' ELSE '{' stmts '}' 
        | IF '(' exprs ')'  '{' stmts '}'
        | WHILE '(' exprs ')' '{' stmts '}' 
        | PROCEDURE ID '(' parameter ')' RETURN returnType '{' stmts  '}' 
        | VAR ID idPrime ':' declareType ';'                              
        | RETURN exprs ';'
        ;


exprs   : exprs aop term
        | exprs cop term
        | exprs AND term
        | exprs OR  term
        | term                    
        ;


term    : ID sbarket
        | ID
        | literal
        | '(' exprs ')'
        | '|' exprs '|'
        | '!' exprs                     %prec Dummy 
        | '^' exprs                     %prec Dummy 
        | '-' exprs                     %prec Dummy  
        | '&' exprs                     %prec Dummy 
        ;

lhs     : ID sbarket                
        | ID                        
        | '^' ID                    
        ;

literal : NUMBER
        | CHARV
        | TRUE
        | FALSE
        | NULLX

sbarket : '[' exprs ']'
        ;


cop     : EQ | GE | LE | NEQ | '>' | '<'
        ;

aop     : '+' | '-' | '*' |'/'

type    : BOOLEAN               
        | INTEGER
        | CHAR
        | CHARPTR
        | STRING
        | INTPTR
        ;

returnType  : BOOLEAN           
        | INTEGER
        | CHAR
        | CHARPTR
        | INTPTR
        ;

declareType : BOOLEAN
        | INTEGER
        | CHAR
        | CHARPTR
        | INTPTR
        | STRING '[' NUMBER ']'
        ;



arguments : exprs argumentsPrime
        |
        ;

argumentsPrime: ',' exprs argumentsPrime
        |
        ;


parameter: ID idPrime ':' type parameterPrime               
        |
        ;

parameterPrime : ';' ID idPrime ':' type parameterPrime
        |
        ;

idPrime : ',' ID idPrime 
        |   
        ;



%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    return;
}
