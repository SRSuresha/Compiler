%{
    #include <cstdio>
    #include <cstdlib>

    #include "ast.hpp"
    #include "primitive.hpp"
    #include "symtab.hpp"

    #define YYDEBUG 1

    extern Program_ptr ast;
    int yylex(void);
    void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose

%token MAIN BOOLEAN CHAR INTEGER STRING INTPTR CHARPTR IF ELSE WHILE VAR PROCEDURE RETURN ID NULLX
 %token NUMBER  AND OR STRINGV CHARV TRUE FALSE 
 %left '<' '>' '=' NEQ LE GE EQ 
 %left '+' '-'
 %left '*' '/'
 %right Dummy 

/*


class ProgramImpl;
class Program;
class ProcImpl;
class Proc;
class Procedure_blockImpl;
class Procedure_block;
class Nested_blockImpl;
class Nested_block;
class DeclImpl;
class Decl;
class Assignment;
class Stat;
class StringAssignment;
class Call;
class IfNoElse;
class IfWithElse;
class WhileLoop;
class Return;
class Return_stat;
class TInteger;
class Type;
class TCharacter;
class TBoolean;
class TCharPtr;
class TIntPtr;
class TString;
class AddressOf;
class PExpr;
class Expression;
class And;
class Expr;
class Div;
class Compare;
class Gt;
class Gteq;
class Lt;
class Lteq;
class Minus;
class Noteq;
class Or;
class Plus;
class Times;
class Not;
class Uminus;
class Ident;
class ArrayAccess;
class IntLit;
class CharLit;
class BoolLit;
class Deref;
class Variable;
class Lhs;
class DerefVariable;
class ArrayElement;
class SymName;
class Primitive;
class StringPrimitive;
typedef union
{
std::list<Proc_ptr>* u_proc_list;
Program* u_program;
std::list<Decl_ptr>* u_decl_list;
Proc* u_proc;
std::list<Stat_ptr>* u_stat_list;
Procedure_block* u_procedure_block;
Nested_block* u_nested_block;
std::list<SymName_ptr>* u_symname_list;
Decl* u_decl;
Stat* u_stat;
std::list<PExpr_ptr>* u_pexpr_list;
Return_stat* u_return_stat;
Type* u_type;
PExpr* u_pexpr;
Expr* u_expr;
Lhs* u_lhs;
SymName* u_symname;
Primitive* u_primitive;
StringPrimitive* u_stringprimitive;

// a couple of hardcoded types
char* u_base_charptr;
int u_base_int;
} classunion_stype;
#define YYSTYPE classunion_stype
*/



%%




s       : PROCEDURE procedureStarts mainProcedures procedures  
          { std::list<Proc_ptr>* temp = $4.u_proc_list;
            temp->push_front($2.u_proc);
            temp->push_front($1.u_proc);
            $$.u_program = new ProgramImpl(temp); }
        ;

procedureStarts: ID '(' parameter ')' RETURN returnType '{' stmts returnStmt '}' PROCEDURE procedureStarts
         {
            $$.u_proc = new ProcImpl($1.u_symname,$8.u_decl_list,$6.u_type,$8.u_procedure_block);
         }
        | 
        ;

procedures : PROCEDURE ID '(' parameter ')' RETURN returnType '{' stmts returnStmt '}' procedures
            {$$.u_proc_list = $12.u_proc_list; 
             $$.u_proc_list->push_front(new ProcImpl($2.u_symname,$9.u_decl_list,$7.u_type,$9.u_procedure_block));}
        |
        ;

mainProcedures: MAIN '('  ')'RETURN returnType '{' stmts returnStmt '}'
        {
            $$.u_proc = new ProcImpl(new SymName("Main"),$7.u_decl_list,$5.u_type,$7.u_procedure_block);
        }
        ;

stmts   : stmt stmts
        | stmt

stmt   : lhs '=' exprs ';'    
        {
            $$.u_stat = new Assignment($1.u_lhs,$3.u_expr);
        }   
        | lhs '=' ID '(' arguments ')' ';' 
        | ifelseStmt 
        | whileStmt stmts
        | PROCEDURE ID '(' parameter ')' RETURN type '{' stmts returnStmt '}' stmts
        | VAR ID idPrime ':' declareType ';' stmts
        |
        ;


exprs   : NULLX
        | ID sbarket                    
        | '&' ID                        
        | '&' ID sbarket                
        | STRINGV                       
        | CHARV                         
        | numExprs                      
        | boolExpr                      
        ;

#here 
lhs     : ID sbarket
        | ID
        | '^' ID
        ;


sbarket : '[' numExprs ']'
        ;


cop     : EQ | GE | LE | NEQ | '>' | '<'
        ;

aop     : '+' | '-' | '*' |'/'

type    : BOOLEAN           {$$.u_type = new TBoolean();}
        | INTEGER
        | CHAR
        | CHARPTR
        | STRING
        | INTPTR
        ;

returnType  : BOOLEAN
        | INTEGER
        | CHAR
        | CHARPTR
        | INTPTR
        ;

declareType : BOOLEAN
        | INTEGER
        | CHAR
        | CHARPTR
        | INTPTR
        | STRING '[' NUMBER ']'
        ;

numExprs: factor termPrime
        ;

term    : ID
        | NUMBER
        | '^' expr     {$$.expr = new Deref($2.u_expr);}
        | '-' term                      %prec Dummy
        ;

termPrime:  aop factor termPrime            {printf("AOP Factor TermPrime\n");}
        |
        ;

factor  : term                              {printf("Term\n");}
        | '(' numExprs ')'
        | '|' numExprs '|'

arguments : exprs argumentsPrime
        |
        ;

argumentsPrime: ',' exprs argumentsPrime
        |
        ;

boolExpr: term cop term conditions
        | TRUE conditions
        | FALSE conditions
        | '!' boolExpr
        ; 

conditions: AND boolExpr
        | OR boolExpr
        |
        ;

returnStmt : RETURN exprs ';' {printf("return exprs\n");}
        ;

parameter: ID idPrime ':' type parameterPrime
        |
        ;

parameterPrime : ';' ID idPrime ':' type parameterPrime
        |
        ;

idPrime : ',' ID idPrime 
        |   
        ;

ifelseStmt  : IF '(' boolExpr ')'  '{' stmts '}' elseStmt
        ;

elseStmt: ELSE '{' stmts '}'
        |
        ;

whileStmt: WHILE '(' boolExpr ')' '{' stmts '}'
        ;

%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    return;
}
